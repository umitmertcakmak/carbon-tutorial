{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/umitmertcakmak/Documents/REP0S/carbon-tutorial/src/content/RepoPage/RepoPage.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query REPO_QUERY {\\n    # Let's use carbon as our organization\\n    organization(login: \\\"carbon-design-system\\\") {\\n      # We'll grab all the repositories in one go. To load more resources\\n      # continuously, see the advanced topics.\\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\\n        totalCount\\n        nodes {\\n          url\\n          homepageUrl\\n          issues(filterBy: { states: OPEN }) {\\n            totalCount\\n          }\\n          stargazers {\\n            totalCount\\n          }\\n          releases(first: 1) {\\n            totalCount\\n            nodes {\\n              name\\n            }\\n          }\\n          name\\n          updatedAt\\n          createdAt\\n          description\\n          id\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport RepoTable from './RepoTable';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\nconst REPO_QUERY = gql(_templateObject());\nconst headers = [{\n  key: 'name',\n  header: 'Name'\n}, {\n  key: 'createdAt',\n  header: 'Created'\n}, {\n  key: 'updatedAt',\n  header: 'Updated'\n}, {\n  key: 'issueCount',\n  header: 'Open Issues'\n}, {\n  key: 'stars',\n  header: 'Stars'\n}, {\n  key: 'links',\n  header: 'Links'\n}];\n\nconst LinkList = ({\n  url,\n  homepageUrl\n}) => __jsx(\"ul\", {\n  style: {\n    display: 'flex'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n}, __jsx(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}, __jsx(Link, {\n  href: url,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n}, \"GitHub\")), homepageUrl && __jsx(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74\n  },\n  __self: this\n}, __jsx(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}, \"\\xA0|\\xA0\"), __jsx(Link, {\n  href: homepageUrl,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}, \"Homepage\")));\n\nconst getRowItems = rows => rows.map(row => _objectSpread({}, row, {\n  key: row.id,\n  stars: row.stargazers.totalCount,\n  issueCount: row.issues.totalCount,\n  createdAt: new Date(row.createdAt).toLocaleDateString(),\n  updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n  links: __jsx(LinkList, {\n    url: row.url,\n    homepageUrl: row.homepageUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })\n}));\n\nconst RepoPage = () => {\n  const _useState = useState(0),\n        totalItems = _useState[0],\n        setTotalItems = _useState[1];\n\n  const _useState2 = useState(0),\n        firstRowIndex = _useState2[0],\n        setFirstRowIndex = _useState2[1];\n\n  const _useState3 = useState(10),\n        currentPageSize = _useState3[0],\n        setCurrentPageSize = _useState3[1];\n\n  return __jsx(\"div\", {\n    className: \"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"bx--row repo-page__r1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"bx--col-lg-16\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(Query, {\n    query: REPO_QUERY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, ({\n    loading,\n    error,\n    data: {\n      organization\n    }\n  }) => {\n    // Wait for the request to complete\n    if (loading) return __jsx(DataTableSkeleton, {\n      columnCount: headers.length + 1,\n      rowCount: 10,\n      headers: headers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }); // Something went wrong with the data fetching\n\n    if (error) return \"Error! \".concat(error.message); // If we're here, we've got our data!\n\n    const repositories = organization.repositories;\n    setTotalItems(repositories.totalCount);\n    const rows = getRowItems(repositories.nodes);\n    return __jsx(React.Fragment, null, __jsx(RepoTable, {\n      headers: headers,\n      rows: rows.slice(firstRowIndex, firstRowIndex + currentPageSize),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), __jsx(Pagination, {\n      totalItems: totalItems,\n      backwardText: \"Previous page\",\n      forwardText: \"Next page\",\n      pageSize: currentPageSize,\n      pageSizes: [5, 10, 15, 25],\n      itemsPerPageText: \"Items per page\",\n      onChange: ({\n        page,\n        pageSize\n      }) => {\n        if (pageSize !== currentPageSize) {\n          setCurrentPageSize(pageSize);\n        }\n\n        setFirstRowIndex(pageSize * (page - 1));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }));\n  }))));\n};\n\nexport default RepoPage;","map":{"version":3,"sources":["/Users/umitmertcakmak/Documents/REP0S/carbon-tutorial/src/content/RepoPage/RepoPage.js"],"names":["React","useState","RepoTable","gql","Query","Link","DataTableSkeleton","Pagination","REPO_QUERY","headers","key","header","LinkList","url","homepageUrl","display","getRowItems","rows","map","row","id","stars","stargazers","totalCount","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","RepoPage","totalItems","setTotalItems","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","loading","error","data","organization","length","message","repositories","nodes","slice","page","pageSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport RepoTable from './RepoTable';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\n\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst headers = [\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'createdAt',\n    header: 'Created',\n  },\n  {\n    key: 'updatedAt',\n    header: 'Updated',\n  },\n  {\n    key: 'issueCount',\n    header: 'Open Issues',\n  },\n  {\n    key: 'stars',\n    header: 'Stars',\n  },\n  {\n    key: 'links',\n    header: 'Links',\n  },\n];\n\nconst LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n\nconst getRowItems = rows =>\n  rows.map(row => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n\nconst RepoPage = () => {\n  const [totalItems, setTotalItems] = useState(0);\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\n      <div className=\"bx--row repo-page__r1\">\n        <div className=\"bx--col-lg-16\">\n          <Query query={REPO_QUERY}>\n            {({ loading, error, data: { organization } }) => {\n              // Wait for the request to complete\n              if (loading)\n                return (\n                  <DataTableSkeleton\n                    columnCount={headers.length + 1}\n                    rowCount={10}\n                    headers={headers}\n                  />\n                );\n\n              // Something went wrong with the data fetching\n              if (error) return `Error! ${error.message}`;\n\n              // If we're here, we've got our data!\n              const { repositories } = organization;\n              setTotalItems(repositories.totalCount);\n              const rows = getRowItems(repositories.nodes);\n\n              return (\n                <>\n                  <RepoTable\n                    headers={headers}\n                    rows={rows.slice(\n                      firstRowIndex,\n                      firstRowIndex + currentPageSize\n                    )}\n                  />\n                  <Pagination\n                    totalItems={totalItems}\n                    backwardText=\"Previous page\"\n                    forwardText=\"Next page\"\n                    pageSize={currentPageSize}\n                    pageSizes={[5, 10, 15, 25]}\n                    itemsPerPageText=\"Items per page\"\n                    onChange={({ page, pageSize }) => {\n                      if (pageSize !== currentPageSize) {\n                        setCurrentPageSize(pageSize);\n                      }\n                      setFirstRowIndex(pageSize * (page - 1));\n                    }}\n                  />\n                </>\n              );\n            }}\n          </Query>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RepoPage;\n"]},"metadata":{},"sourceType":"module"}